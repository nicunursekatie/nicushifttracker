#!/usr/bin/env node

/**
 * Firebase Database Setup Helper
 * 
 * This script helps you complete the Firebase database setup for the NICU Shift Tracker.
 * Run this after you've:
 * 1. Created a Firebase project
 * 2. Enabled anonymous authentication (✓ You've done this!)
 * 3. Enabled Firestore Database
 * 
 * Usage: node setup-firebase-database.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// ANSI color codes
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  red: '\x1b[31m',
  cyan: '\x1b[36m'
};

function print(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function printSection(title) {
  console.log('\n' + '='.repeat(60));
  print(title, 'bright');
  console.log('='.repeat(60) + '\n');
}

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function main() {
  print('\n🚀 Firebase Database Setup Helper', 'cyan');
  print('For NICU Shift Tracker\n', 'cyan');

  // Check if Firebase CLI is installed
  printSection('Step 1: Checking Prerequisites');
  
  const { execSync } = require('child_process');
  let firebaseCliInstalled = false;
  
  try {
    execSync('firebase --version', { stdio: 'pipe' });
    firebaseCliInstalled = true;
    print('✓ Firebase CLI is installed', 'green');
  } catch (error) {
    print('✗ Firebase CLI is not installed', 'red');
    print('\nPlease install it first:', 'yellow');
    print('  npm install -g firebase-tools', 'bright');
    print('\nThen run this script again.\n', 'yellow');
    process.exit(1);
  }

  // Check current status
  printSection('Step 2: Current Status');
  
  const envExists = fs.existsSync('.env');
  const firebasercContent = fs.readFileSync('.firebaserc', 'utf8');
  const hasProjectId = !firebasercContent.includes('your-project-id');
  
  print(`Environment file (.env): ${envExists ? '✓ Exists' : '✗ Missing'}`, envExists ? 'green' : 'yellow');
  print(`Firebase project ID: ${hasProjectId ? '✓ Configured' : '✗ Not configured'}`, hasProjectId ? 'green' : 'yellow');
  
  if (envExists && hasProjectId) {
    print('\n✓ Configuration files are ready!', 'green');
    const proceed = await question('\nDo you want to deploy Firestore rules and indexes now? (y/n): ');
    
    if (proceed.toLowerCase() === 'y' || proceed.toLowerCase() === 'yes') {
      await deployFirestore();
    } else {
      print('\nYou can deploy later using:', 'cyan');
      print('  firebase deploy --only firestore', 'bright');
    }
    
    rl.close();
    return;
  }

  // Get Firebase configuration
  printSection('Step 3: Firebase Configuration');
  
  print('Please gather your Firebase configuration from:', 'cyan');
  print('1. Go to Firebase Console: https://console.firebase.google.com/', 'bright');
  print('2. Select your project', 'bright');
  print('3. Click gear icon ⚙️ → "Project settings"', 'bright');
  print('4. Scroll down to "Your apps" → Web app', 'bright');
  print('5. Copy the configuration values\n', 'bright');

  const proceed = await question('Do you have your Firebase configuration ready? (y/n): ');
  
  if (proceed.toLowerCase() !== 'y' && proceed.toLowerCase() !== 'yes') {
    print('\nPlease get your Firebase configuration first, then run this script again.', 'yellow');
    print('See FIREBASE_SETUP.md for detailed instructions.\n', 'cyan');
    rl.close();
    return;
  }

  // Collect Firebase config
  print('\nPlease enter your Firebase configuration:\n', 'cyan');
  
  const config = {
    apiKey: await question('API Key: '),
    authDomain: await question('Auth Domain: '),
    projectId: await question('Project ID: '),
    storageBucket: await question('Storage Bucket: '),
    messagingSenderId: await question('Messaging Sender ID: '),
    appId: await question('App ID: '),
    measurementId: await question('Measurement ID (optional, press Enter to skip): ')
  };

  // Validate required fields
  const requiredFields = ['apiKey', 'authDomain', 'projectId', 'storageBucket', 'messagingSenderId', 'appId'];
  const missingFields = requiredFields.filter(field => !config[field]);
  
  if (missingFields.length > 0) {
    print(`\n✗ Missing required fields: ${missingFields.join(', ')}`, 'red');
    print('Please run the script again with complete configuration.\n', 'yellow');
    rl.close();
    return;
  }

  // Create .env file
  printSection('Step 4: Creating Configuration Files');
  
  const envContent = `# Firebase Configuration
# Generated by setup-firebase-database.js on ${new Date().toISOString()}

VITE_FIREBASE_API_KEY=${config.apiKey}
VITE_FIREBASE_AUTH_DOMAIN=${config.authDomain}
VITE_FIREBASE_PROJECT_ID=${config.projectId}
VITE_FIREBASE_STORAGE_BUCKET=${config.storageBucket}
VITE_FIREBASE_MESSAGING_SENDER_ID=${config.messagingSenderId}
VITE_FIREBASE_APP_ID=${config.appId}
${config.measurementId ? `VITE_FIREBASE_MEASUREMENT_ID=${config.measurementId}` : '# VITE_FIREBASE_MEASUREMENT_ID='}
`;

  fs.writeFileSync('.env', envContent);
  print('✓ Created .env file', 'green');

  // Update .firebaserc
  const firebasercNew = {
    projects: {
      default: config.projectId
    },
    targets: {},
    etags: {}
  };
  
  fs.writeFileSync('.firebaserc', JSON.stringify(firebasercNew, null, 2));
  print('✓ Updated .firebaserc with project ID', 'green');

  // Deploy Firestore rules
  printSection('Step 5: Deploying Firestore Configuration');
  
  print('Next, we need to deploy Firestore security rules and indexes.', 'cyan');
  print('This will set up the database structure and security.\n', 'cyan');
  
  const deploy = await question('Deploy now? (y/n): ');
  
  if (deploy.toLowerCase() === 'y' || deploy.toLowerCase() === 'yes') {
    await deployFirestore();
  } else {
    print('\nYou can deploy later using:', 'yellow');
    print('  firebase login', 'bright');
    print('  firebase deploy --only firestore', 'bright');
  }

  // Final instructions
  printSection('Step 6: Next Steps');
  
  print('✓ Configuration complete!', 'green');
  print('\nYou can now:', 'cyan');
  print('1. Start the development server:', 'bright');
  print('   npm run dev', 'bright');
  print('\n2. Verify your setup:', 'bright');
  print('   npm run verify-firebase', 'bright');
  print('\n3. Build for production:', 'bright');
  print('   npm run build', 'bright');
  
  print('\n📚 Documentation:', 'cyan');
  print('  - QUICKSTART.md - Quick setup guide', 'bright');
  print('  - FIREBASE_SETUP.md - Detailed setup instructions', 'bright');
  print('  - DATABASE_SCHEMA.md - Database structure reference', 'bright');
  
  print('\n🎉 Setup complete! Your Firebase database is ready to use.\n', 'green');
  
  rl.close();
}

async function deployFirestore() {
  print('\nDeploying Firestore configuration...', 'cyan');
  
  const { execSync } = require('child_process');
  
  try {
    // Check if logged in
    try {
      execSync('firebase projects:list', { stdio: 'pipe' });
    } catch (error) {
      print('\nYou need to login to Firebase first.', 'yellow');
      print('Running: firebase login\n', 'bright');
      execSync('firebase login', { stdio: 'inherit' });
    }
    
    // Deploy rules
    print('\nDeploying Firestore security rules...', 'cyan');
    execSync('firebase deploy --only firestore:rules', { stdio: 'inherit' });
    print('✓ Firestore rules deployed', 'green');
    
    // Deploy indexes
    print('\nDeploying Firestore indexes...', 'cyan');
    execSync('firebase deploy --only firestore:indexes', { stdio: 'inherit' });
    print('✓ Firestore indexes deployed', 'green');
    
    print('\n✓ Firestore configuration deployed successfully!', 'green');
    
  } catch (error) {
    print('\n✗ Deployment failed', 'red');
    print('Error: ' + error.message, 'red');
    print('\nYou can try again later using:', 'yellow');
    print('  firebase login', 'bright');
    print('  firebase deploy --only firestore', 'bright');
  }
}

// Run the script
main().catch((error) => {
  print('\n✗ An error occurred:', 'red');
  print(error.message, 'red');
  rl.close();
  process.exit(1);
});
